{"remainingRequest":"C:\\GitHub\\StudentLearning\\01-login\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\GitHub\\StudentLearning\\01-login\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\GitHub\\StudentLearning\\01-login\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\GitHub\\StudentLearning\\01-login\\src\\Sciences\\Business.vue?vue&type=template&id=5c1708b7&","dependencies":[{"path":"C:\\GitHub\\StudentLearning\\01-login\\src\\Sciences\\Business.vue","mtime":1620244681536},{"path":"C:\\GitHub\\StudentLearning\\01-login\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\GitHub\\StudentLearning\\01-login\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\GitHub\\StudentLearning\\01-login\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\GitHub\\StudentLearning\\01-login\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibmV4dC1zdGVwcyIgfSwgWwogICAgX3ZtLl9tKDApLAogICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgeyBzdGF0aWNDbGFzczogImNvbC1tZC01IG1iLTQiIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJoNiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJtYi0zIiB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIHRvOgogICAgICAgICAgICAgICAgICAgICAgIi9odHRwczovL3d3dy5idXNpbmVzc25ld3NkYWlseS5jb20vNDY4Ni1ob3ctdG8tc3RhcnQtYS1idXNpbmVzcy5odG1sIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiZm9udC1hd2Vzb21lLWljb24iLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtci0yIiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpY29uOiAibGluayIgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJCdXNpbmVzcyBCYXNpY3MgIikKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCJMZWFybiBhbGwgdGhlIGJhc2ljcyBuZWNlc3NhcnkgZm9yIEJ1c2luZXNzIildKSwKICAgICAgICAgIF9jKCJ2aWRlby1lbWJlZCIsIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBjc3M6ICJlbWJlZC1yZXNwb25zaXZlLTIxYnk5IiwKICAgICAgICAgICAgICBzcmM6ICJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUVjdHpMVEZya3RjIgogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZCIgfSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTUgbWItNCIgfSwgWwogICAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJtYi0zIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2F1dGgwLmNvbS9kb2NzL211bHRpZmFjdG9yLWF1dGhlbnRpY2F0aW9uIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJmb250LWF3ZXNvbWUtaWNvbiIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXItMiIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpY29uOiAibGluayIgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF92bS5fdigiRmluYW5jaWFsIE1hbmFnZW1lbnQgIikKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiRmluYW5jaWFsIE1hbmFnZW1lbnQgbWVhbnMgcGxhbm5pbmcsIG9yZ2FuaXppbmcsIGRpcmVjdGluZyBhbmQgY29udHJvbGxpbmcgdGhlIGZpbmFuY2lhbCBhY3Rpdml0aWVzIHN1Y2ggYXMgcHJvY3VyZW1lbnQgYW5kIHV0aWxpemF0aW9uIG9mIGZ1bmRzIG9mIHRoZSBlbnRlcnByaXNlLiBJdCBtZWFucyBhcHBseWluZyBnZW5lcmFsIG1hbmFnZW1lbnQgcHJpbmNpcGxlcyB0byBmaW5hbmNpYWwgcmVzb3VyY2VzIG9mIHRoZSBlbnRlcnByaXNlLiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKQogICAgXSksCiAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC01IG1iLTQiIH0sIFsKICAgICAgICBfYygiaDYiLCB7IHN0YXRpY0NsYXNzOiAibWItMyIgfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgeyBhdHRyczogeyBocmVmOiAiL0NvdXJzZXMiIH0gfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJmb250LWF3ZXNvbWUtaWNvbiIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXItMiIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpY29uOiAibGluayIgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF92bS5fdigiTGVnYWwgLyBSZWd1bGF0b3J5IENvbXBsaWFuY2UgIikKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiU2ltcGx5IHB1dCwgcmVndWxhdG9yeSBjb21wbGlhbmNlIGlzIHdoZW4gYSBidXNpbmVzcyBmb2xsb3dzIHN0YXRlLCBmZWRlcmFsLCBhbmQgaW50ZXJuYXRpb25hbCBsYXdzIGFuZCByZWd1bGF0aW9ucyByZWxldmFudCB0byBpdHMgb3BlcmF0aW9ucy4gLi4uIFJlZ3VsYXRvcnkgY29tcGxpYW5jZSAoYWRoZXJpbmcgdG8gZ292ZXJubWVudCBsYXdzKSBkaWZmZXJzIGZyb20gb3RoZXIgYXNwZWN0cyBvZiBjb3Jwb3JhdGUgY29tcGxpYW5jZSAoc3VjaCBhcyBmb2xsb3dpbmcgaW50ZXJuYWwgcG9saWNpZXMgYW5kIHJ1bGVzKS4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kIiB9KSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNSBtYi00IiB9LCBbCiAgICAgICAgX2MoImg2IiwgeyBzdGF0aWNDbGFzczogIm1iLTMiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgaHJlZjogImh0dHBzOi8vYXV0aDAuY29tL2RvY3MvcnVsZXMiIH0gfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJmb250LWF3ZXNvbWUtaWNvbiIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXItMiIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpY29uOiAibGluayIgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF92bS5fdigiUGVyc29ubmVsIE1hbmFnZW1lbnQgIikKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIFBlcnNvbm5lbCBtYW5hZ2VtZW50IGlzIGRlZmluZWQgYXMgYW4gYWRtaW5pc3RyYXRpdmUgc3BlY2lhbGl6YXRpb24gdGhhdCBmb2N1c2VzIG9uIGhpcmluZyBhbmQgZGV2ZWxvcGluZyBlbXBsb3llZXMgdG8gYmVjb21lIG1vcmUgdmFsdWFibGUgdG8gdGhlIGNvbXBhbnkuIEl0IGlzIHNvbWV0aW1lcyBjb25zaWRlcmVkIHRvIGJlIGEgc3ViLWNhdGVnb3J5IG9mIGh1bWFuIHJlc291cmNlcyB0aGF0IG9ubHkgZm9jdXNlcyBvbiBhZG1pbmlzdHJhdGlvbi4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNSBtYi00IiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImg2IiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm1iLTMiIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJyb3V0ZXItbGluayIsCiAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL0FsZ2VicmEiIH0gfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImZvbnQtYXdlc29tZS1pY29uIiwgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXItMiIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWNvbjogImxpbmsiIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIFNhbGVzIE1hbmFnZW1lbnQgIikKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiU2FsZXMgbWFuYWdlbWVudCBpcyB0aGUgcHJvY2VzcyBvZiBoaXJpbmcsIHRyYWluaW5nIGFuZCBtb3RpdmF0aW5nIHNhbGVzIHN0YWZmLCBjb29yZGluYXRpbmcgb3BlcmF0aW9ucyBhY3Jvc3MgdGhlIHNhbGVzIGRlcGFydG1lbnQgYW5kIGltcGxlbWVudGluZyBhIGNvaGVzaXZlIHNhbGVzIHN0cmF0ZWd5IHRoYXQgZHJpdmVzIGJ1c2luZXNzIHJldmVudWVzLiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZCIgfSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNSBtYi00IiB9LCBbCiAgICAgICAgICBfYygiaDYiLCB7IHN0YXRpY0NsYXNzOiAibWItMyIgfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vYXV0aDAuY29tL2RvY3MvbXVsdGlmYWN0b3ItYXV0aGVudGljYXRpb24iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiZm9udC1hd2Vzb21lLWljb24iLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXItMiIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGljb246ICJsaW5rIiB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF92bS5fdigiIE1hcmtldGluZyBQcmFjdGljZXMgIikKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJNYXJrZXRpbmcgcmVtYWlucyBlc3NlbnRpYWwgZm9yIHNtYWxsIGJ1c2luZXNzZXMuIEl0IGFsbG93cyB0aGVtIHRvIGNvbXBldGUgd2l0aCBvdGhlcnMuIEJ1dCBpdCBhbHNvIGFsbG93cyB0aGVtIHRvIHNlbGwgcHJvZHVjdHMgYW5kIHNlcnZpY2VzLiBBbmQgaXQgZW5hYmxlcyB0aGVtIHRvIGJlY29tZSBwcm9maXRhYmxlIGFuZCBncm93LiBCdXQgdGhlIHdheXMgdG8gbWFya2V0IHlvdXIgc21hbGwgYnVzaW5lc3Mgc2VlbSBlbmRsZXNzLiBNYXJrZXR0aW5nIGlzIG5lY2Vzc2FyeSBmb3IgYnVzaW5lc3MiCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTUgbWItNCIgfSwgWwogICAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJtYi0zIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7IGF0dHJzOiB7IGhyZWY6ICIvQ291cnNlcyIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImZvbnQtYXdlc29tZS1pY29uIiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtci0yIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGljb246ICJsaW5rIiB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgQWNjb3VudGluZyBQcmluY2lwbGVzICIpCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkFjY291bnRpbmcgcHJpbmNpcGxlcyBhcmUgdGhlIHJ1bGVzIGFuZCBndWlkZWxpbmVzIHRoYXQgY29tcGFuaWVzIG11c3QgZm9sbG93IHdoZW4gcmVwb3J0aW5nIGZpbmFuY2lhbCBkYXRhLiAiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kIiB9KSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNSBtYi00IiB9LCBbCiAgICAgICAgX2MoImg2IiwgeyBzdGF0aWNDbGFzczogIm1iLTMiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vYXV0aDAuY29tL2RvY3MvbXVsdGlmYWN0b3ItYXV0aGVudGljYXRpb24iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImZvbnQtYXdlc29tZS1pY29uIiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtci0yIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGljb246ICJsaW5rIiB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX3ZtLl92KCJJbnZlbnRvcnkgQ29udHJvbCAiKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJJbnZlbnRvcnkgY29udHJvbCBpcyB0aGUgcHJvY2VzcyBvZiBrZWVwaW5nIHRoZSByaWdodCBudW1iZXIgb2YgcGFydHMgYW5kIHByb2R1Y3RzIGluIHN0b2NrIHRvIGF2b2lkIHNob3J0YWdlcywgb3ZlcnN0b2NrcywgYW5kIG90aGVyIGNvc3RseSBwcm9ibGVtcy4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pLAogICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNSBtYi00IiB9LCBbCiAgICAgICAgX2MoImg2IiwgeyBzdGF0aWNDbGFzczogIm1iLTMiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgaHJlZjogIi9Db3Vyc2VzIiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiZm9udC1hd2Vzb21lLWljb24iLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1yLTIiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWNvbjogImxpbmsiIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfdm0uX3YoIlRheGVzIGFuZCBZb3VyIEJ1c2luZXNzIE9yZ2FuaXphdGlvbiAiKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJUaGVyZSBhcmUgZm91ciBmb3JtcyBvZiBidXNpbmVzcyBvcmdhbml6YXRpb24gYWNjb3JkaW5nIHRvIHRheCBzdGF0dXM6IHNvbGUgcHJvcHJpZXRvcnNoaXAsIHBhcnRuZXJzaGlwLCBjb3Jwb3JhdGlvbiwgYW5kIG5vbnByb2ZpdC4gTGVhcm4gYWJvdXQgdGhlbSAiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kIiB9KSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNSBtYi00IiB9LCBbCiAgICAgICAgX2MoImg2IiwgeyBzdGF0aWNDbGFzczogIm1iLTMiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgaHJlZjogImh0dHBzOi8vYXV0aDAuY29tL2RvY3MvcnVsZXMiIH0gfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJmb250LWF3ZXNvbWUtaWNvbiIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXItMiIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpY29uOiAibGluayIgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF92bS5fdigiIEZ1bGZpbGxtZW50ICIpCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygicCIsIFtfdm0uX3YoIiBMZWFybiBvZiBGdWxmaWxsbWVudCBpbiB0aGUgQnVzaW5lc3MgV29ybGQgLiIpXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTUgbWItNCIgfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImg2IiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJtYi0zIiB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgIHsgYXR0cnM6IHsgdG86ICIvQWxnZWJyYSIgfSB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJmb250LWF3ZXNvbWUtaWNvbiIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtci0yIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWNvbjogImxpbmsiIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgSW5mb3JtYXRpb24gVGVjaG5vbG9neSAiKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJ0aGUgc3R1ZHkgb3IgdXNlIG9mIHN5c3RlbXMgKGVzcGVjaWFsbHkgY29tcHV0ZXJzIGFuZCB0ZWxlY29tbXVuaWNhdGlvbnMpIGZvciBzdG9yaW5nLCByZXRyaWV2aW5nLCBhbmQgc2VuZGluZyBpbmZvcm1hdGlvbi4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgXSkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gWwogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtNCIgfSwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogIm1iLTQgYXBwLWxvZ28iLAogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICJodHRwczovL2kucGluaW1nLmNvbS9vcmlnaW5hbHMvYjYvYTEvNjQvYjZhMTY0ZmUzYzc0ZWViOGZhZThkZTdhZDRiMWQzZWYuZ2lmIiwKICAgICAgICAgICAgYWx0OiAiQnJvb2tkYWxlIGxvZ28iLAogICAgICAgICAgICB3aWR0aDogIjI3MCIsCiAgICAgICAgICAgIGhlaWdodDogIjE2MCIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtNCIgfSwgW19jKCJoMiIsIFtfdm0uX3YoIkJ1c2luZXNzLi4uLiIpXSldKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtNCIgfSwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogIm1iLTQgYXBwLWxvZ28iLAogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiAiaHR0cHM6Ly9pLmdpZmVyLmNvbS83eUFiLmdpZiIsCiAgICAgICAgICAgIGFsdDogIkJyb29rZGFsZSBsb2dvIiwKICAgICAgICAgICAgd2lkdGg6ICIxNzAiLAogICAgICAgICAgICBoZWlnaHQ6ICIyMTAiCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSkKICAgIF0pCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}