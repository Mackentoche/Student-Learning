{"remainingRequest":"C:\\GitHub\\StudentLearning\\01-login\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\GitHub\\StudentLearning\\01-login\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\GitHub\\StudentLearning\\01-login\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\GitHub\\StudentLearning\\01-login\\src\\views\\Extra\\Car.vue?vue&type=template&id=062e95eb&","dependencies":[{"path":"C:\\GitHub\\StudentLearning\\01-login\\src\\views\\Extra\\Car.vue","mtime":1620265455755},{"path":"C:\\GitHub\\StudentLearning\\01-login\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\GitHub\\StudentLearning\\01-login\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\GitHub\\StudentLearning\\01-login\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\GitHub\\StudentLearning\\01-login\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}