{"remainingRequest":"C:\\GitHub\\StudentLearning\\01-login\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\GitHub\\StudentLearning\\01-login\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\GitHub\\StudentLearning\\01-login\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\GitHub\\StudentLearning\\01-login\\src\\APCourses\\APCourses.vue?vue&type=template&id=d92d828c&","dependencies":[{"path":"C:\\GitHub\\StudentLearning\\01-login\\src\\APCourses\\APCourses.vue","mtime":1620259038796},{"path":"C:\\GitHub\\StudentLearning\\01-login\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\GitHub\\StudentLearning\\01-login\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\GitHub\\StudentLearning\\01-login\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\GitHub\\StudentLearning\\01-login\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibmV4dC1zdGVwcyIgfSwgWwogICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgX3ZtLl9tKDApLAogICAgICBfdm0uX20oMSksCiAgICAgIF92bS5fbSgyKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC04IiB9LCBbCiAgICAgICAgICBfYygiaDYiLCB7IHN0YXRpY0NsYXNzOiAibWItMyIgfSwgW192bS5fdigiIEFQIEVuZ2xpc2ggIildKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLTYiIH0sIFsKICAgICAgICAgICAgICBfYygiaDYiLCB7IHN0YXRpY0NsYXNzOiAibWItMyIgfSwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9hdXRoMC5jb20vZG9jcy9tdWx0aWZhY3Rvci1hdXRoZW50aWNhdGlvbiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygiZm9udC1hd2Vzb21lLWljb24iLCB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1yLTIiLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWNvbjogImxpbmsiIH0KICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkFQIEVuZ2xpc2ggbGl0ZXJhdHVyZSBhbmQgQ29tcG9zaXRpb24gIikKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiIFRoZSBtYWluIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgdHdvIGNvdXJzZXMgaXMgdGhhdCBBUCBMaXRlcmF0dXJlIGZvY3VzZXMgbW9zdGx5IG9uIGFuYWx5emluZyBsaXRlcmF0dXJlIGFuZCBwb2V0cnksIHdoaWxlIEFQIExhbmd1YWdlIGhhcyBhIG11Y2ggYnJvYWRlciBzY29wZS4gQVAgRW5nbGlzaCBMYW5ndWFnZSBhbmQgQ29tcG9zaXRpb24gdGVhY2hlcyB5b3UgdG8gZGVjb25zdHJ1Y3QgYXJndW1lbnRzIGFuZCByaGV0b3JpY2FsIHN0cmF0ZWdpZXMgaW4gbW9zdGx5IG5vbi1maWN0aW9uIHdvcmtzIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC02IiB9LCBbCiAgICAgICAgICAgICAgX2MoImg2IiwgeyBzdGF0aWNDbGFzczogIm1iLTMiIH0sIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vYXV0aDAuY29tL2RvY3MvbXVsdGlmYWN0b3ItYXV0aGVudGljYXRpb24iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoImZvbnQtYXdlc29tZS1pY29uIiwgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtci0yIiwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGljb246ICJsaW5rIiB9CiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJBUCBFbmdsaXNoIExhbmd1YWdlIGFuZCBDb21wb3NpdGlvbiAiKQogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICJBZHZhbmNlZCBQbGFjZW1lbnQgRW5nbGlzaCBMYW5ndWFnZSBhbmQgQ29tcG9zaXRpb24gaXMgYSBjb3Vyc2UgYW5kIGV4YW1pbmF0aW9uIG9mZmVyZWQgYnkgdGhlIENvbGxlZ2UgQm9hcmQgYXMgcGFydCBvZiB0aGUgQWR2YW5jZWQgUGxhY2VtZW50IFByb2dyYW0uIFdoZW4gQVAgZXhhbXMgd2VyZSBmaXJzdCBpbXBsZW1lbnRlZCwgRW5nbGlzaCBMYW5ndWFnZSBhbmQgRW5nbGlzaCBMaXRlcmF0dXJlIHdlcmUgaW5pdGlhbGx5IGNvbWJpbmVkLiBUaGV5IHNlcGFyYXRlZCBpbiAxOTgwIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fbSgzKQogICAgICBdKQogICAgXSksCiAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbSIgfSwgWwogICAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJtYi0zIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2F1dGgwLmNvbS9kb2NzL211bHRpZmFjdG9yLWF1dGhlbnRpY2F0aW9uIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJmb250LWF3ZXNvbWUtaWNvbiIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXItMiIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpY29uOiAibGluayIgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF92bS5fdigiQVAgQ2FsYyBBQiAiKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgRXhwbG9yZSB0aGUgY29uY2VwdHMsIG1ldGhvZHMsIGFuZCBhcHBsaWNhdGlvbnMgb2YgZGlmZmVyZW50aWFsIGFuZCBpbnRlZ3JhbCBjYWxjdWx1cy4gWW914oCZbGwgd29yayB0byB1bmRlcnN0YW5kIHRoZSB0aGVvcmV0aWNhbCBiYXNpcyBhbmQgc29sdmUgcHJvYmxlbXMgYnkgYXBwbHlpbmcgeW91ciBrbm93bGVkZ2UgYW5kIHNraWxscy4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLXNtIiB9LCBbCiAgICAgICAgX2MoImg2IiwgeyBzdGF0aWNDbGFzczogIm1iLTMiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vYXV0aDAuY29tL2RvY3MvbXVsdGlmYWN0b3ItYXV0aGVudGljYXRpb24iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImZvbnQtYXdlc29tZS1pY29uIiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtci0yIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGljb246ICJsaW5rIiB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX3ZtLl92KCJBUCBDYWxjdWNsdXMgQkMgIikKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIFRoZSBtYWluIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgdHdvIGNvdXJzZXMgaXMgdGhhdCBBUCBMaXRlcmF0dXJlIGZvY3VzZXMgbW9zdGx5IG9uIGFuYWx5emluZyBsaXRlcmF0dXJlIGFuZCBwb2V0cnksIHdoaWxlIEFQIExhbmd1YWdlIGhhcyBhIG11Y2ggYnJvYWRlciBzY29wZS4gQVAgRW5nbGlzaCBMYW5ndWFnZSBhbmQgQ29tcG9zaXRpb24gdGVhY2hlcyB5b3UgdG8gZGVjb25zdHJ1Y3QgYXJndW1lbnRzIGFuZCByaGV0b3JpY2FsIHN0cmF0ZWdpZXMgaW4gbW9zdGx5IG5vbi1maWN0aW9uIHdvcmtzIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1zbSIgfSwgWwogICAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJtYi0zIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2F1dGgwLmNvbS9kb2NzL211bHRpZmFjdG9yLWF1dGhlbnRpY2F0aW9uIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJmb250LWF3ZXNvbWUtaWNvbiIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXItMiIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpY29uOiAibGluayIgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF92bS5fdigiQVAgU3RhdGlzdGljcyAiKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJUaHJvdWdoIHRoZSB1c2Ugb2YgdGhlIHVuaWZ5aW5nIHRoZW1lcyBvZiBjYWxjdWx1cyAoZS5nLiwgZGVyaXZhdGl2ZXMsIGludGVncmFscywgbGltaXRzLCBhcHByb3hpbWF0aW9uLCBhbmQgYXBwbGljYXRpb25zIGFuZCBtb2RlbGluZykgdGhlIGNvdXJzZXMgYmVjb21lIGNvaGVzaXZlIHJhdGhlciB0aGFuIGEgY29sbGVjdGlvbiBvZiB1bnJlbGF0ZWQgdG9waWNzLiBBUCBDYWxjdWx1cyBCQyBpcyByb3VnaGx5IGVxdWl2YWxlbnQgdG8gYm90aCBmaXJzdCBhbmQgc2Vjb25kIHNlbWVzdGVyIGNvbGxlZ2UgY2FsY3VsdXMgY291cnNlcy4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pLAogICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICBfYygiaDYiLCB7IHN0YXRpY0NsYXNzOiAibWItMyIgfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9hdXRoMC5jb20vZG9jcy9tdWx0aWZhY3Rvci1hdXRoZW50aWNhdGlvbiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiZm9udC1hd2Vzb21lLWljb24iLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1yLTIiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWNvbjogImxpbmsiIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfdm0uX3YoIkFQIEJpb2xvZ3kgIikKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWItNCBhcHAtbG9nbyIsCiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgImh0dHBzOi8vd3d3LmJjYmUub3JnL2Ntcy9saWIvQUwwMTkwMTM3NC9DZW50cmljaXR5L0RvbWFpbi8yMDkxL2Jpb2Jvb2suanBnIiwKICAgICAgICAgICAgICBhbHQ6ICJCcm9va2RhbGUgbG9nbyIsCiAgICAgICAgICAgICAgd2lkdGg6ICIxOTAiLAogICAgICAgICAgICAgIGhlaWdodDogIjE1MCIKICAgICAgICAgICAgfQogICAgICAgICAgfSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICBfYygiaDYiLCB7IHN0YXRpY0NsYXNzOiAibWItMyIgfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9hdXRoMC5jb20vZG9jcy9tdWx0aWZhY3Rvci1hdXRoZW50aWNhdGlvbiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiZm9udC1hd2Vzb21lLWljb24iLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1yLTIiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWNvbjogImxpbmsiIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfdm0uX3YoIkFQIENoZW1pc3RyeSAiKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtYi00IGFwcC1sb2dvIiwKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly9pbWFnZXMtbmEuc3NsLWltYWdlcy1hbWF6b24uY29tL2ltYWdlcy9JLzUxUUsxWUNoZm5MLl9TWDM4MV9CTzEsMjA0LDIwMywyMDBfLmpwZyIsCiAgICAgICAgICAgICAgYWx0OiAiQnJvb2tkYWxlIGxvZ28iLAogICAgICAgICAgICAgIHdpZHRoOiAiMTkwIiwKICAgICAgICAgICAgICBoZWlnaHQ6ICIxNjAiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgX2MoImg2IiwgeyBzdGF0aWNDbGFzczogIm1iLTMiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vYXV0aDAuY29tL2RvY3MvbXVsdGlmYWN0b3ItYXV0aGVudGljYXRpb24iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImZvbnQtYXdlc29tZS1pY29uIiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtci0yIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGljb246ICJsaW5rIiB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX3ZtLl92KCJBUCBQaHlzaWNzIDEgIikKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWItNCBhcHAtbG9nbyIsCiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgImh0dHBzOi8vaW1hZ2VzLW5hLnNzbC1pbWFnZXMtYW1hem9uLmNvbS9pbWFnZXMvSS81MVdoZDdMaG5sTC5fU1gzODNfQk8xLDIwNCwyMDMsMjAwXy5qcGciLAogICAgICAgICAgICAgIGFsdDogIkJyb29rZGFsZSBsb2dvIiwKICAgICAgICAgICAgICB3aWR0aDogIjE5MCIsCiAgICAgICAgICAgICAgaGVpZ2h0OiAiMTYwIgogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJtYi0zIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2F1dGgwLmNvbS9kb2NzL211bHRpZmFjdG9yLWF1dGhlbnRpY2F0aW9uIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJmb250LWF3ZXNvbWUtaWNvbiIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXItMiIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpY29uOiAibGluayIgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF92bS5fdigiQVAgUGh5c2ljcyAyICIpCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX20oNCkKICAgICAgICBdKQogICAgICBdKQogICAgXSksCiAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJtYi0zIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2F1dGgwLmNvbS9kb2NzL211bHRpZmFjdG9yLWF1dGhlbnRpY2F0aW9uIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJmb250LWF3ZXNvbWUtaWNvbiIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXItMiIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpY29uOiAibGluayIgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF92bS5fdigiQVAgR292ZXJubWVudCAiKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtYi00IGFwcC1sb2dvIiwKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly90YXJnZXQuc2NlbmU3LmNvbS9pcy9pbWFnZS9UYXJnZXQvR1VFU1RfZTE1NTQyYzctYWY5MS00ZTdmLThmMTEtM2I4MTE1MDBhOGQ5P3dpZD00ODgmaGVpPTQ4OCZmbXQ9cGpwZWciLAogICAgICAgICAgICAgIGFsdDogIkJyb29rZGFsZSBsb2dvIiwKICAgICAgICAgICAgICB3aWR0aDogIjIzMCIsCiAgICAgICAgICAgICAgaGVpZ2h0OiAiMTYwIgogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJtYi0zIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwczovL2ltYWdlcy1uYS5zc2wtaW1hZ2VzLWFtYXpvbi5jb20vaW1hZ2VzL0kvNzFOcjNmWTNyWUwuanBnIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJmb250LWF3ZXNvbWUtaWNvbiIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXItMiIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpY29uOiAibGluayIgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF92bS5fdigiQVAgRXVyb3BlYW4gSGlzdG9yeSAiKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtYi00IGFwcC1sb2dvIiwKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly9pbWFnZXMtbmEuc3NsLWltYWdlcy1hbWF6b24uY29tL2ltYWdlcy9JLzcxTnIzZlkzcllMLmpwZyIsCiAgICAgICAgICAgICAgYWx0OiAiQnJvb2tkYWxlIGxvZ28iLAogICAgICAgICAgICAgIHdpZHRoOiAiMTkwIiwKICAgICAgICAgICAgICBoZWlnaHQ6ICIxNjAiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgX2MoImg2IiwgeyBzdGF0aWNDbGFzczogIm1iLTMiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vYXV0aDAuY29tL2RvY3MvbXVsdGlmYWN0b3ItYXV0aGVudGljYXRpb24iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImZvbnQtYXdlc29tZS1pY29uIiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtci0yIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGljb246ICJsaW5rIiB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX3ZtLl92KCJBUCBIdW1hbiBHZW9ncmFwaHkgIikKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWItNCBhcHAtbG9nbyIsCiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgImh0dHBzOi8vaW1hZ2VzLW5hLnNzbC1pbWFnZXMtYW1hem9uLmNvbS9pbWFnZXMvSS81MWxDRGc5emtKTC5fU1gzODNfQk8xLDIwNCwyMDMsMjAwXy5qcGciLAogICAgICAgICAgICAgIGFsdDogIkJyb29rZGFsZSBsb2dvIiwKICAgICAgICAgICAgICB3aWR0aDogIjE5MCIsCiAgICAgICAgICAgICAgaGVpZ2h0OiAiMTYwIgogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJtYi0zIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2F1dGgwLmNvbS9kb2NzL211bHRpZmFjdG9yLWF1dGhlbnRpY2F0aW9uIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJmb250LWF3ZXNvbWUtaWNvbiIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXItMiIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpY29uOiAibGluayIgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF92bS5fdigiIEFQIE1hY3JvRWNvbm9taWNzICIpCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICBzdGF0aWNDbGFzczogIm1iLTQgYXBwLWxvZ28iLAogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICJodHRwczovL2ltYWdlcy1uYS5zc2wtaW1hZ2VzLWFtYXpvbi5jb20vaW1hZ2VzL0kvNzFGWEtKOG4rUUwuanBnIiwKICAgICAgICAgICAgICBhbHQ6ICJCcm9va2RhbGUgbG9nbyIsCiAgICAgICAgICAgICAgd2lkdGg6ICIxOTAiLAogICAgICAgICAgICAgIGhlaWdodDogIjE2MCIKICAgICAgICAgICAgfQogICAgICAgICAgfSkKICAgICAgICBdKQogICAgICBdKQogICAgXSksCiAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJtYi0zIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2F1dGgwLmNvbS9kb2NzL211bHRpZmFjdG9yLWF1dGhlbnRpY2F0aW9uIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJmb250LWF3ZXNvbWUtaWNvbiIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXItMiIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpY29uOiAibGluayIgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF92bS5fdigiQVAgTWljcm9FY29ub21pY3MgIikKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWItNCBhcHAtbG9nbyIsCiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgImh0dHBzOi8vaW1hZ2VzLW5hLnNzbC1pbWFnZXMtYW1hem9uLmNvbS9pbWFnZXMvSS83MUZYS0o4bitRTC5qcGciLAogICAgICAgICAgICAgIGFsdDogIkJyb29rZGFsZSBsb2dvIiwKICAgICAgICAgICAgICB3aWR0aDogIjE5MCIsCiAgICAgICAgICAgICAgaGVpZ2h0OiAiMTYwIgogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJtYi0zIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwczovL2ltYWdlcy1uYS5zc2wtaW1hZ2VzLWFtYXpvbi5jb20vaW1hZ2VzL0kvNzF5ditDZDVSd0wuanBnIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJmb250LWF3ZXNvbWUtaWNvbiIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXItMiIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpY29uOiAibGluayIgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF92bS5fdigiIEFQIFUuUyBHb3Zlcm5tZW50ICIpCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICBzdGF0aWNDbGFzczogIm1iLTQgYXBwLWxvZ28iLAogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICJodHRwczovL2ltYWdlcy1uYS5zc2wtaW1hZ2VzLWFtYXpvbi5jb20vaW1hZ2VzL0kvNzF5ditDZDVSd0wuanBnIiwKICAgICAgICAgICAgICBhbHQ6ICJCcm9va2RhbGUgbG9nbyIsCiAgICAgICAgICAgICAgd2lkdGg6ICIxOTAiLAogICAgICAgICAgICAgIGhlaWdodDogIjE2MCIKICAgICAgICAgICAgfQogICAgICAgICAgfSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICBfYygiaDYiLCB7IHN0YXRpY0NsYXNzOiAibWItMyIgfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9hdXRoMC5jb20vZG9jcy9tdWx0aWZhY3Rvci1hdXRoZW50aWNhdGlvbiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiZm9udC1hd2Vzb21lLWljb24iLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1yLTIiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWNvbjogImxpbmsiIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfdm0uX3YoIkFQIFUuUyBQb2xpdGljcyAiKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtYi00IGFwcC1sb2dvIiwKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly9pbWFnZXMtbmEuc3NsLWltYWdlcy1hbWF6b24uY29tL2ltYWdlcy9JLzcxeXYrQ2Q1UndMLmpwZyIsCiAgICAgICAgICAgICAgYWx0OiAiQnJvb2tkYWxlIGxvZ28iLAogICAgICAgICAgICAgIHdpZHRoOiAiMTkwIiwKICAgICAgICAgICAgICBoZWlnaHQ6ICIxNjAiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgX2MoImg2IiwgeyBzdGF0aWNDbGFzczogIm1iLTMiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vYXV0aDAuY29tL2RvY3MvbXVsdGlmYWN0b3ItYXV0aGVudGljYXRpb24iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImZvbnQtYXdlc29tZS1pY29uIiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtci0yIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGljb246ICJsaW5rIiB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgQVAgVS5TIEhpc3RvcnkgIikKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWItNCBhcHAtbG9nbyIsCiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgImh0dHBzOi8vaW1hZ2VzLW5hLnNzbC1pbWFnZXMtYW1hem9uLmNvbS9pbWFnZXMvSS83MVJuTVNRdHRsTC5qcGciLAogICAgICAgICAgICAgIGFsdDogIkJyb29rZGFsZSBsb2dvIiwKICAgICAgICAgICAgICB3aWR0aDogIjE5MCIsCiAgICAgICAgICAgICAgaGVpZ2h0OiAiMTYwIgogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKSwKICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgX2MoImg2IiwgeyBzdGF0aWNDbGFzczogIm1iLTMiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vYXV0aDAuY29tL2RvY3MvbXVsdGlmYWN0b3ItYXV0aGVudGljYXRpb24iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImZvbnQtYXdlc29tZS1pY29uIiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtci0yIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGljb246ICJsaW5rIiB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX3ZtLl92KCJBUCBHb3Zlcm5tZW50ICIpCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICBzdGF0aWNDbGFzczogIm1iLTQgYXBwLWxvZ28iLAogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICJodHRwczovL3RhcmdldC5zY2VuZTcuY29tL2lzL2ltYWdlL1RhcmdldC9HVUVTVF9lMTU1NDJjNy1hZjkxLTRlN2YtOGYxMS0zYjgxMTUwMGE4ZDk/d2lkPTQ4OCZoZWk9NDg4JmZtdD1wanBlZyIsCiAgICAgICAgICAgICAgYWx0OiAiQnJvb2tkYWxlIGxvZ28iLAogICAgICAgICAgICAgIHdpZHRoOiAiMjMwIiwKICAgICAgICAgICAgICBoZWlnaHQ6ICIxNjAiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgX2MoImg2IiwgeyBzdGF0aWNDbGFzczogIm1iLTMiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vaW1hZ2VzLW5hLnNzbC1pbWFnZXMtYW1hem9uLmNvbS9pbWFnZXMvSS83MU5yM2ZZM3JZTC5qcGciCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImZvbnQtYXdlc29tZS1pY29uIiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtci0yIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGljb246ICJsaW5rIiB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX3ZtLl92KCJBUCBFdXJvcGVhbiBIaXN0b3J5ICIpCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICBzdGF0aWNDbGFzczogIm1iLTQgYXBwLWxvZ28iLAogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICJodHRwczovL2ltYWdlcy1uYS5zc2wtaW1hZ2VzLWFtYXpvbi5jb20vaW1hZ2VzL0kvNzFOcjNmWTNyWUwuanBnIiwKICAgICAgICAgICAgICBhbHQ6ICJCcm9va2RhbGUgbG9nbyIsCiAgICAgICAgICAgICAgd2lkdGg6ICIxOTAiLAogICAgICAgICAgICAgIGhlaWdodDogIjE2MCIKICAgICAgICAgICAgfQogICAgICAgICAgfSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICBfYygiaDYiLCB7IHN0YXRpY0NsYXNzOiAibWItMyIgfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9hdXRoMC5jb20vZG9jcy9tdWx0aWZhY3Rvci1hdXRoZW50aWNhdGlvbiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiZm9udC1hd2Vzb21lLWljb24iLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1yLTIiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWNvbjogImxpbmsiIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfdm0uX3YoIkFQIEh1bWFuIEdlb2dyYXBoeSAiKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtYi00IGFwcC1sb2dvIiwKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly9pbWFnZXMtbmEuc3NsLWltYWdlcy1hbWF6b24uY29tL2ltYWdlcy9JLzUxbENEZzl6a0pMLl9TWDM4M19CTzEsMjA0LDIwMywyMDBfLmpwZyIsCiAgICAgICAgICAgICAgYWx0OiAiQnJvb2tkYWxlIGxvZ28iLAogICAgICAgICAgICAgIHdpZHRoOiAiMTkwIiwKICAgICAgICAgICAgICBoZWlnaHQ6ICIxNjAiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgX2MoImg2IiwgeyBzdGF0aWNDbGFzczogIm1iLTMiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vYXV0aDAuY29tL2RvY3MvbXVsdGlmYWN0b3ItYXV0aGVudGljYXRpb24iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImZvbnQtYXdlc29tZS1pY29uIiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtci0yIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGljb246ICJsaW5rIiB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgQVAgTWFjcm9FY29ub21pY3MgIikKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWItNCBhcHAtbG9nbyIsCiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgImh0dHBzOi8vaW1hZ2VzLW5hLnNzbC1pbWFnZXMtYW1hem9uLmNvbS9pbWFnZXMvSS83MUZYS0o4bitRTC5qcGciLAogICAgICAgICAgICAgIGFsdDogIkJyb29rZGFsZSBsb2dvIiwKICAgICAgICAgICAgICB3aWR0aDogIjE5MCIsCiAgICAgICAgICAgICAgaGVpZ2h0OiAiMTYwIgogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKSwKICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgX2MoImg2IiwgeyBzdGF0aWNDbGFzczogIm1iLTMiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vYXV0aDAuY29tL2RvY3MvbXVsdGlmYWN0b3ItYXV0aGVudGljYXRpb24iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImZvbnQtYXdlc29tZS1pY29uIiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtci0yIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGljb246ICJsaW5rIiB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX3ZtLl92KCJBUCBHZXJtYW4gIikKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWItNCBhcHAtbG9nbyIsCiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgImh0dHA6Ly9iZXN0YXBib29rcy5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTYvMDgvR2VybWFuLUdyYW1tYXItRHJpbGxzLUZvci1BUC1HZXJtYW4tMjM3eDMwMC5qcGciLAogICAgICAgICAgICAgIGFsdDogIkJyb29rZGFsZSBsb2dvIiwKICAgICAgICAgICAgICB3aWR0aDogIjE4MCIsCiAgICAgICAgICAgICAgaGVpZ2h0OiAiMTYwIgogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJtYi0zIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwczovL2ltYWdlcy1uYS5zc2wtaW1hZ2VzLWFtYXpvbi5jb20vaW1hZ2VzL0kvNzF5ditDZDVSd0wuanBnIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJmb250LWF3ZXNvbWUtaWNvbiIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXItMiIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpY29uOiAibGluayIgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF92bS5fdigiIEFQIFdvcmxkIEhpc3RvcnkgIikKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWItNCBhcHAtbG9nbyIsCiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgImh0dHBzOi8vaW1hZ2VzLW5hLnNzbC1pbWFnZXMtYW1hem9uLmNvbS9pbWFnZXMvSS83MXZUdXJySXdyTC5qcGciLAogICAgICAgICAgICAgIGFsdDogIkJyb29rZGFsZSBsb2dvIiwKICAgICAgICAgICAgICB3aWR0aDogIjE4MCIsCiAgICAgICAgICAgICAgaGVpZ2h0OiAiMTYwIgogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJtYi0zIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2F1dGgwLmNvbS9kb2NzL211bHRpZmFjdG9yLWF1dGhlbnRpY2F0aW9uIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJmb250LWF3ZXNvbWUtaWNvbiIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXItMiIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpY29uOiAibGluayIgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF92bS5fdigiQVAgQ2hpbmVzZSBMYW5ndWFnZSBhbmQgQ3VsdHVyZSAiKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtYi00IGFwcC1sb2dvIiwKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly9pbWFnZXMtbmEuc3NsLWltYWdlcy1hbWF6b24uY29tL2ltYWdlcy9JLzcxeXYrQ2Q1UndMLmpwZyIsCiAgICAgICAgICAgICAgYWx0OiAiQnJvb2tkYWxlIGxvZ28iLAogICAgICAgICAgICAgIHdpZHRoOiAiMTg1IiwKICAgICAgICAgICAgICBoZWlnaHQ6ICIxNjAiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgX2MoImg2IiwgeyBzdGF0aWNDbGFzczogIm1iLTMiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vYXV0aDAuY29tL2RvY3MvbXVsdGlmYWN0b3ItYXV0aGVudGljYXRpb24iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImZvbnQtYXdlc29tZS1pY29uIiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtci0yIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGljb246ICJsaW5rIiB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgQVAgRnJlbmNoIExhbmd1YWdlIGFuZCBDdWx0dXJlICIpCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICBzdGF0aWNDbGFzczogIm1iLTQgYXBwLWxvZ28iLAogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICJodHRwczovL2ltYWdlcy1uYS5zc2wtaW1hZ2VzLWFtYXpvbi5jb20vaW1hZ2VzL0kvNTE2YTlDTjZYWEwuX1NYMzgxX0JPMSwyMDQsMjAzLDIwMF8uanBnIiwKICAgICAgICAgICAgICBhbHQ6ICJCcm9va2RhbGUgbG9nbyIsCiAgICAgICAgICAgICAgd2lkdGg6ICIxOTAiLAogICAgICAgICAgICAgIGhlaWdodDogIjE2MCIKICAgICAgICAgICAgfQogICAgICAgICAgfSkKICAgICAgICBdKQogICAgICBdKQogICAgXSksCiAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJtYi0zIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2F1dGgwLmNvbS9kb2NzL211bHRpZmFjdG9yLWF1dGhlbnRpY2F0aW9uIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJmb250LWF3ZXNvbWUtaWNvbiIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXItMiIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpY29uOiAibGluayIgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF92bS5fdigiQVAgSXRhbGlhbiBMYW5ndWFnZSBhbmQgQ3VsdHVyZSAiKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtYi00IGFwcC1sb2dvIiwKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly9pbWFnZXMtbmEuc3NsLWltYWdlcy1hbWF6b24uY29tL2ltYWdlcy9JLzQxNjRxekFjSmFMLl9TWDI1OF9CTzEsMjA0LDIwMywyMDBfLmpwZyIsCiAgICAgICAgICAgICAgYWx0OiAiQnJvb2tkYWxlIGxvZ28iLAogICAgICAgICAgICAgIHdpZHRoOiAiMTkwIiwKICAgICAgICAgICAgICBoZWlnaHQ6ICIxNjAiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgX2MoImg2IiwgeyBzdGF0aWNDbGFzczogIm1iLTMiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vaW1hZ2VzLW5hLnNzbC1pbWFnZXMtYW1hem9uLmNvbS9pbWFnZXMvSS83MXl2K0NkNVJ3TC5qcGciCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImZvbnQtYXdlc29tZS1pY29uIiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtci0yIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGljb246ICJsaW5rIiB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgQVAgTGF0aW4gIikKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWItNCBhcHAtbG9nbyIsCiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgImh0dHBzOi8vaW1hZ2VzLW5hLnNzbC1pbWFnZXMtYW1hem9uLmNvbS9pbWFnZXMvSS81MUFTMzZGSXpoTC5fU1gzMzNfQk8xLDIwNCwyMDMsMjAwXy5qcGciLAogICAgICAgICAgICAgIGFsdDogIkJyb29rZGFsZSBsb2dvIiwKICAgICAgICAgICAgICB3aWR0aDogIjE3NSIsCiAgICAgICAgICAgICAgaGVpZ2h0OiAiMTcwIgogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJtYi0zIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2F1dGgwLmNvbS9kb2NzL211bHRpZmFjdG9yLWF1dGhlbnRpY2F0aW9uIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJmb250LWF3ZXNvbWUtaWNvbiIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXItMiIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpY29uOiAibGluayIgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF92bS5fdigiQVAgU3BhbmlzaCAiKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtYi00IGFwcC1sb2dvIiwKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly9pbWFnZXMtbmEuc3NsLWltYWdlcy1hbWF6b24uY29tL2ltYWdlcy9JLzUxUUpyb0QwRWxMLl9TWDM4M19CTzEsMjA0LDIwMywyMDBfLmpwZyIsCiAgICAgICAgICAgICAgYWx0OiAiQnJvb2tkYWxlIGxvZ28iLAogICAgICAgICAgICAgIHdpZHRoOiAiMTg3IiwKICAgICAgICAgICAgICBoZWlnaHQ6ICIxNzAiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgX2MoImg2IiwgeyBzdGF0aWNDbGFzczogIm1iLTMiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vYXV0aDAuY29tL2RvY3MvbXVsdGlmYWN0b3ItYXV0aGVudGljYXRpb24iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImZvbnQtYXdlc29tZS1pY29uIiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtci0yIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGljb246ICJsaW5rIiB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgQVAgU2VtaW5hciAiKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtYi00IGFwcC1sb2dvIiwKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzL3B1Ymxpc2hlci9jb250ZW50L2ltYWdlcy9mcm9udGNvdmVyL2dfYjFEd0FBUUJBSj9maWZlPXcyMDAtaDMwMCIsCiAgICAgICAgICAgICAgYWx0OiAiQnJvb2tkYWxlIGxvZ28iLAogICAgICAgICAgICAgIHdpZHRoOiAiMTgwIiwKICAgICAgICAgICAgICBoZWlnaHQ6ICIxNzAiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pLAogICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICBfYygiaDYiLCB7IHN0YXRpY0NsYXNzOiAibWItMyIgfSwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9hdXRoMC5jb20vZG9jcy9tdWx0aWZhY3Rvci1hdXRoZW50aWNhdGlvbiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiZm9udC1hd2Vzb21lLWljb24iLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1yLTIiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaWNvbjogImxpbmsiIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfdm0uX3YoIkFQIFJlc2VhcmNoICIpCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICBzdGF0aWNDbGFzczogIm1iLTQgYXBwLWxvZ28iLAogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIHNyYzogImh0dHBzOi8vbS5tZWRpYS1hbWF6b24uY29tL2ltYWdlcy9JLzQxNVJiVkF5WnJMLmpwZyIsCiAgICAgICAgICAgICAgYWx0OiAiQnJvb2tkYWxlIGxvZ28iLAogICAgICAgICAgICAgIHdpZHRoOiAiMTkwIiwKICAgICAgICAgICAgICBoZWlnaHQ6ICIxODAiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgX2MoImg2IiwgeyBzdGF0aWNDbGFzczogIm1iLTMiIH0sIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vaW1hZ2VzLW5hLnNzbC1pbWFnZXMtYW1hem9uLmNvbS9pbWFnZXMvSS83MU5yM2ZZM3JZTC5qcGciCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImZvbnQtYXdlc29tZS1pY29uIiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtci0yIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGljb246ICJsaW5rIiB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX3ZtLl92KCJBUCBBcnRzIGFuZCBEZXNpZ24gUHJvZ3JhbSAiKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtYi00IGFwcC1sb2dvIiwKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly9pLnBpbmltZy5jb20vNDc0eC9jOC8yOS9lZC9jODI5ZWQyNGM3MzM5OTBhNzZiMDZmMDk4ZTU2YjQxYS5qcGciLAogICAgICAgICAgICAgIGFsdDogIkJyb29rZGFsZSBsb2dvIiwKICAgICAgICAgICAgICB3aWR0aDogIjE4MCIsCiAgICAgICAgICAgICAgaGVpZ2h0OiAiMTYwIgogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJtYi0zIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2F1dGgwLmNvbS9kb2NzL211bHRpZmFjdG9yLWF1dGhlbnRpY2F0aW9uIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJmb250LWF3ZXNvbWUtaWNvbiIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXItMiIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpY29uOiAibGluayIgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF92bS5fdigiQVAgQXJ0IEhpc3RvcnkgIikKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWItNCBhcHAtbG9nbyIsCiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgImh0dHBzOi8vaW1hZ2VzLW5hLnNzbC1pbWFnZXMtYW1hem9uLmNvbS9pbWFnZXMvSS81MTJWVGxpdUV4TC5fU1gzODZfQk8xLDIwNCwyMDMsMjAwXy5qcGciLAogICAgICAgICAgICAgIGFsdDogIkJyb29rZGFsZSBsb2dvIiwKICAgICAgICAgICAgICB3aWR0aDogIjE4MCIsCiAgICAgICAgICAgICAgaGVpZ2h0OiAiMTcwIgogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgIF9jKCJoNiIsIHsgc3RhdGljQ2xhc3M6ICJtYi0zIiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2F1dGgwLmNvbS9kb2NzL211bHRpZmFjdG9yLWF1dGhlbnRpY2F0aW9uIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJmb250LWF3ZXNvbWUtaWNvbiIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXItMiIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpY29uOiAibGluayIgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF92bS5fdigiIEFQIE11c2ljIFRoZW9yeSAiKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtYi00IGFwcC1sb2dvIiwKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly9kMjhoZ3ByaThhbTJpZi5jbG91ZGZyb250Lm5ldC9ib29rX2ltYWdlcy9vbml4L2N2cjk3ODE1MDYyNjQwOTcvYXAtbXVzaWMtdGhlb3J5LTk3ODE1MDYyNjQwOTdfaHIuanBnIiwKICAgICAgICAgICAgICBhbHQ6ICJCcm9va2RhbGUgbG9nbyIsCiAgICAgICAgICAgICAgd2lkdGg6ICIxODAiLAogICAgICAgICAgICAgIGhlaWdodDogIjE3MCIKICAgICAgICAgICAgfQogICAgICAgICAgfSkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICBdKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC00IiB9LCBbCiAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJtYi00IGFwcC1sb2dvIiwKICAgICAgICBhdHRyczogewogICAgICAgICAgc3JjOiAiaHR0cHM6Ly9taXJvLm1lZGl1bS5jb20vbWF4LzMwMDAvMSo0czRkSUllZmNTYVgybjJGX3NOREN3LmpwZWciLAogICAgICAgICAgYWx0OiAiQnJvb2tkYWxlIGxvZ28iLAogICAgICAgICAgd2lkdGg6ICIyNzAiLAogICAgICAgICAgaGVpZ2h0OiAiMTYwIgogICAgICAgIH0KICAgICAgfSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLTQiIH0sIFsKICAgICAgX2MoImgyIiwgW192bS5fdigiQVAgQ291cnNlcyIpXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLTQiIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBzdGF0aWNDbGFzczogIm1iLTQgYXBwLWxvZ28iLAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBzcmM6CiAgICAgICAgICAgICJodHRwczovL3Joc3BhdHJpb3R2b2ljZS5vcmcvd3AtY29udGVudC91cGxvYWRzLzIwMTkvMDEvMF8yTXpISzBMQVJWb3NPRnBlLnBuZyIsCiAgICAgICAgICBhbHQ6ICJCcm9va2RhbGUgbG9nbyIsCiAgICAgICAgICB3aWR0aDogIjI3MCIsCiAgICAgICAgICBoZWlnaHQ6ICIxNjAiCiAgICAgICAgfQogICAgICB9KQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtNCIgfSwgWwogICAgICBfYygiaDYiLCB7IHN0YXRpY0NsYXNzOiAibWItMyIgfSwgW19jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiIiB9IH0pXSksCiAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJtYi00IGFwcC1sb2dvIiwKICAgICAgICBhdHRyczogewogICAgICAgICAgc3JjOgogICAgICAgICAgICAiaHR0cHM6Ly93d3cudGFrZW15b25saW5lY2xhc3Mub25saW5lL2ltYWdlcy9vbmxpbmVjbGFzc2VzL2VuZ2xpc2guanBnIiwKICAgICAgICAgIGFsdDogIkJyb29rZGFsZSBsb2dvIiwKICAgICAgICAgIHdpZHRoOiAiMzIwIiwKICAgICAgICAgIGhlaWdodDogIjE4MCIKICAgICAgICB9CiAgICAgIH0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgImEiLAogICAgICB7CiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICJodHRwczovL3d3dy5lYm9va3MuY29tL2VuLXVzL2Jvb2svMjA5OTk4MjIwL2FwLXBoeXNpY3MtMi13aXRoLW9ubGluZS10ZXN0cy93b2xmLWpvbmF0aGFuLXJpZGVvdXQta2VubmV0aC8/c3JjPWZlZWRMIgogICAgICAgIH0KICAgICAgfSwKICAgICAgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogIm1iLTQgYXBwLWxvZ28iLAogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICJodHRwczovL2ltYWdlcy1uYS5zc2wtaW1hZ2VzLWFtYXpvbi5jb20vaW1hZ2VzL0kvNTE5SmpYbVdCSEwuX1NYMzgzX0JPMSwyMDQsMjAzLDIwMF8uanBnIiwKICAgICAgICAgICAgYWx0OiAiQnJvb2tkYWxlIGxvZ28iLAogICAgICAgICAgICB3aWR0aDogIjE5MCIsCiAgICAgICAgICAgIGhlaWdodDogIjE2MCIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdCiAgICApCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}